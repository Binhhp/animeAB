@{
    ViewBag.Title = "AnimeAB - Bộ sưu tập";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="app-title">
    <div>
        <h1><i class="fa fa-th-list"></i> Bộ sưu tập</h1>
        <p>Bộ sưu tập theo mùa</p>
    </div>
    <ul class="app-breadcrumb breadcrumb side">
        <li class="breadcrumb-item"><i class="fa fa-home fa-lg"></i></li>
        <li class="breadcrumb-item">Bộ sưu tập</li>
    </ul>
</div>
<div class="card">
    <div class="card-header text-right">
        <a href="#" class="btn btn-info btn-sm" data-toggle="modal" data-target="#modal-add" id="modal__btn-add"><i class="fa fa-plus"></i>Thêm mới</a>
    </div>
    <div class="card-body">
        <table id="myTable" class="table table-hover table-bordered">
            <thead>
                <tr>
                    <th width="10%">Meta</th>
                    <th width="30%">Ảnh</th>
                    <th width="20%">Tiêu đề</th>
                    <th width="20%">Ngày tạo</th>
                    <th width="20%">Xử lý</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>
@{await Html.RenderPartialAsync("Add.cshtml");}
@{await Html.RenderPartialAsync("Edit.cshtml");}
@section scripts{
    <script type="text/javascript">
        $(".index").removeClass("active");
        $(".collection").addClass("active");

        async function JTables() {

            await $("#myTable").DataTable({
                ...optionsDatabase,
                ajax: {
                    url: "@Url.Action("ListCollection", "Collection", Context.Request.Scheme)",
                    method: "GET"
                },
                columns: [
                    { data: "key", name: "key", 'className': 'text-center', orderable: false },
                    {
                        data: "image", name: "image", 'className': 'text-center', orderable: false,
                        render: function (data) {
                            return '<img src="' + data + '" width="200" height="120" />';
                        }
                    },
                    { data: "title", name: "title", 'className': 'text-center', orderable: false },
                    {
                        data: "dateCreated", name: "dateCreated", 'className': 'text-center', orderable: false,
                        render: function (data) {
                            var date = new Date(data);
                            return date.getDate() + "-" + (date.getMonth() + 1) + "-" + date.getFullYear();
                        }
                    },
                    {
                        data: null,
                        className: "text-center",
                        render: function (data, type, row) {
                            var button =
                                '<a href="javascript:void(0);" class="btn btn-info btn-sm" data-toggle="modal" data-target="#modal-edit" onclick="Edit(this)"  data-key="' + data.key + '" data-title="' + data.title + '" title="Sửa"><i class="fa fa-edit"></i>Sửa</a>&nbsp;<a href="javascript:void(0);" class="btn btn-danger btn-sm" onclick="Delete(this)"  data-key="' + data.key + '" title="Xóa"><i class="fa fa-trash"></i>Xóa</a></td>';
                            return button;
                        },
                    }
                ],
                "columnDefs": [{
                    "searchable": false,
                    "visible": false,
                    "checkboxes": {
                        'selectRow': true
                    }
                }],
                "select": {
                    'style': 'multi'
                },
            });
        };

        JTables();

        //Reload tables
        async function reloadTables() {
            await $("#myTable").DataTable().ajax.reload();
        };

        //Add
        var validator = $("#form-add").validate({
            rules: {
                ...rules,
                file: {
                    required: true,
                    extension: "jpg|jpeg|png"
                }
            },
            messages: {
                ...messages,
                file: {
                    required: "Bạn cần chọn file ảnh",
                    extension: "Định dạng ảnh không đúng"
                }
            },
            ...options,
            submitHandler: function (form) {
                var data = $("#form-add").find(".form-control");
                var formData = new FormData();

                data.map(item => {
                    var valueItem = $(data[item]).val();
                    const key = $(data[item]).attr("data-key");

                    if (key === "FileUpload") {
                        const fileUpload = $(data[item]).get(0);
                        valueItem = (fileUpload.files)[0];

                    }

                    if (key === 'Key') {
                        valueItem = valueItem.toLowerCase();
                    }

                    formData.append(key, valueItem);
                })

                $.ajax({
                    type: "POST",
                    url: "/anime/collection",
                    data: formData,
                    processData: false,
                    contentType: false,
                    beforeSend: function () {
                        $("#btn-add").html("Loading...");
                        $("#btn-add").addClass("disabled");
                    },
                    success: function () {
                        toastr["success"]("Thêm mới thành công");
                        $("#btn-add").html('<i class="fa fa-plus"></i>&nbsp;Thêm mới');
                        $("#btn-add").removeClass("disabled");
                        var data = $("#form-add").find("input[class='form-control']");
                        data.map(item => {
                            $(data[item]).val("")
                        });

                        reloadTables();
                    },
                    error: function (errors) {
                        if (errors.responseText !== "") {
                            toastr["error"](errors.responseText);
                        }
                        else {
                            toastr["error"]("Interval Server Error");
                        }
                        $("#btn-add").html('<i class="fa fa-plus"></i>&nbsp;Thêm mới');
                        $("#btn-add").removeClass("disabled");
                    }
                })
            }
        });

        $("#modal__btn-add").click(function () {
            $("#form-add").find(".form-control").val("");
            $("#form-add").find(".form-control").removeClass("is-invalid");
            validator.resetForm();
        });
        ///Edit
        function Edit(event) {
            validatorEdit.resetForm();

            $("#form-edit").find(".form-control").removeClass("is-invalid");

            var data = $(event).data();
            $("input[type='file']").val("");

            for (var item in data) {
                if (item === "target" || item === "toggle") continue;
                var input = $("#form-edit").find('*[name=' + item + ']');

                input.val(data[item]);
            }
        };

        var validatorEdit = $("#form-edit").validate({
            rules: {
                ...rules,
                file: {
                    required: false,
                    extension: "jpg|jpeg|png"
                }
            },
            messages: {
                ...messages,
                file: {
                    extension: "Định dạng ảnh không đúng"
                }
            },
            ...options,
            submitHandler: function (form) {
                var data = $("#form-edit").find(".edit");
                var formData = new FormData();
                var k = "";

                data.map(item => {
                    var valueItem = $(data[item]).val();

                    const key = $(data[item]).attr("data-keyboard");

                    if (key === "FileUpload") {
                        const fileUpload = $(data[item]).get(0);
                        valueItem = (fileUpload.files)[0];

                    }

                    if (key === 'Key') {
                        valueItem = valueItem.toLowerCase();
                        k = valueItem;
                    }

                    formData.append(key, valueItem);
                })

                $.ajax({
                    type: "PUT",
                    url: "/anime/collection/" + k,
                    data: formData,
                    processData: false,
                    contentType: false,
                    beforeSend: function () {
                        $("#btn-edit").html("Loading...");
                        $("#btn-edit").addClass("disabled");
                    },
                    success: function () {
                        toastr["success"]("Cập nhật thành công");
                        $("#modal-edit").modal("toggle");
                        $("#btn-edit").html('<i class="fa fa-plus"></i>&nbsp;Cập nhật');
                        $("#btn-edit").removeClass("disabled");
                        var data = $("#form-edit").find("input[class='edit']");
                        data.map(item => {
                            $(data[item]).val("")
                        });

                        reloadTables();
                        validatorEdit.resetForm();
                    },
                    error: function (errors) {
                        if (errors.responseText !== "") {
                            toastr["error"](errors.responseText);
                        }
                        else {
                            toastr["error"]("Interval Server Error");
                        }
                        $("#btn-edit").html('<i class="fa fa-plus"></i>&nbsp;Cập nhật');
                        $("#btn-edit").removeClass("disabled");
                    }
                })
            }
        });
        ///Delete

        function Delete(event) {
            swal({
                title: "Bạn có muốn xóa bản ghi này?",
                type: "warning",
                showCancelButton: true,
                confirmButtonText: "Có, xóa nó!",
                cancelButtonText: "Không, không cần đâu!",
                closeOnConfirm: false,
                closeOnCancel: true
            }, (isConfirm) => {
                if (isConfirm) {
                    halderDelete();
                }
            });

            const halderDelete = async () => {
                var key = $(event).attr('data-key');

                $.ajax({
                    type: 'DELETE',
                    url: '/anime/collection/' + key,
                    contentType: false,
                    processData: false,
                    success: function () {
                        toastr["success"]("Xóa thành công");
                        swal.close();
                        reloadTables();
                    },
                    error: function (errors) {
                        swal("Oh no!", "Error " + errors.status + " " + errors.responseText, "error");
                    }
                })
            }
        }
    </script>
}